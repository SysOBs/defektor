/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pt.uc.sob.defektor.server.api;

import pt.uc.sob.defektor.server.model.Slave;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-17T12:09:39.110699252+01:00[Europe/Lisbon]")

@Validated
@Api(value = "slave", description = "the slave API")
public interface SlaveApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /slave : add slave machine
     * Add slave machine
     *
     * @param slave Added Slave (required)
     * @return slave created (status code 201)
     *         or invalid input, object invalid (status code 400)
     *         or slave already exists (status code 409)
     */
    @ApiOperation(value = "add slave machine", nickname = "slaveAdd", notes = "Add slave machine", response = Slave.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "slave created", response = Slave.class),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "slave already exists") })
    @RequestMapping(value = "/slave",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Slave> slaveAdd(@ApiParam(value = "Added Slave" ,required=true )  @Valid @RequestBody Slave slave) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"example.org\", \"port\" : 22, \"credentials\" : { \"key\" : \"ooooohhhh this is a super secret private key... ðŸ”‘\", \"username\" : \"debian\" }, \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /slave/{slaveId} : delete slave machine
     * Delete slave machine
     *
     * @param slaveId Slave machine identifier (required)
     * @return slave deleted (status code 200)
     *         or slave does not exist (status code 400)
     */
    @ApiOperation(value = "delete slave machine", nickname = "slaveDelete", notes = "Delete slave machine", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "slave deleted"),
        @ApiResponse(code = 400, message = "slave does not exist") })
    @RequestMapping(value = "/slave/{slaveId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> slaveDelete(@ApiParam(value = "Slave machine identifier",required=true) @PathVariable("slaveId") UUID slaveId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /slave/{slaveId} : slave machine info
     * Get slave machine information
     *
     * @param slaveId Slave machine identifier (required)
     * @return slave information (status code 200)
     *         or slave does not exist (status code 400)
     */
    @ApiOperation(value = "slave machine info", nickname = "slaveGet", notes = "Get slave machine information", response = Slave.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "slave information", response = Slave.class),
        @ApiResponse(code = 400, message = "slave does not exist") })
    @RequestMapping(value = "/slave/{slaveId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Slave> slaveGet(@ApiParam(value = "Slave machine identifier",required=true) @PathVariable("slaveId") UUID slaveId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"example.org\", \"port\" : 22, \"credentials\" : { \"key\" : \"ooooohhhh this is a super secret private key... ðŸ”‘\", \"username\" : \"debian\" }, \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /slave : list slave machines
     * List available slave machines
     *
     * @return slaves listed (status code 200)
     */
    @ApiOperation(value = "list slave machines", nickname = "slaveList", notes = "List available slave machines", response = Slave.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "slaves listed", response = Slave.class, responseContainer = "List") })
    @RequestMapping(value = "/slave",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Slave>> slaveList() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"example.org\", \"port\" : 22, \"credentials\" : { \"key\" : \"ooooohhhh this is a super secret private key... ðŸ”‘\", \"username\" : \"debian\" }, \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
