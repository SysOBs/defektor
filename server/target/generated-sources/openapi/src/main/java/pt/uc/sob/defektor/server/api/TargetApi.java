/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pt.uc.sob.defektor.server.api;

import pt.uc.sob.defektor.server.model.Target;
import pt.uc.sob.defektor.server.model.TargetType;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-09-14T17:54:31.910834+01:00[Europe/Lisbon]")
@Validated
@Api(value = "target", description = "the target API")
public interface TargetApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /target/{target} : list target instances
     * List available targets
     *
     * @param target target type (required)
     * @return slaves listed (status code 200)
     */
    @ApiOperation(value = "list target instances", nickname = "targetGet", notes = "List available targets", response = Target.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "slaves listed", response = Target.class, responseContainer = "List") })
    @GetMapping(
        value = "/target/{target}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Target>> targetGet(@ApiParam(value = "target type",required=true) @PathVariable("target") String target) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"istio_ingress_2314234h21345\", \"type\" : { \"name\" : \"container\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /target : list targets
     * List available targets
     *
     * @return slaves listed (status code 200)
     */
    @ApiOperation(value = "list targets", nickname = "targetList", notes = "List available targets", response = TargetType.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "slaves listed", response = TargetType.class, responseContainer = "List") })
    @GetMapping(
        value = "/target",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TargetType>> targetList() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"container\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
